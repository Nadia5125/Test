{"version":3,"sources":["utils/SweetAPI.js","utils/FruitAPI.js","components/itemImages/itemImages.jsx","components/createItem/createItem.jsx","App.jsx","serviceWorker.js","index.js"],"names":["axios","get","data","post","put","itemImages","props","items","allItemsForSale","map","item","className","key","_id","alt","src","image","type","quantity","color","size","onClick","event","handleClick","handleMinusClick","handleDeleteClick","CreateItem","for","name","placeholder","onChange","handleChange","value","itemName","itemQuantity","itemType","itemImage","submitClick","App","Component","constructor","super","onHandleChange","target","this","setState","updateAddQuantity","id","preventDefault","console","log","addFruitQuantity","addSweetsQuantity","updateMinusQuantity","minusFruitQuantity","minusSweetsQuantity","addToStore","state","alert","createFruit","createSweet","deleteFromStore","deleteFruit","deleteSweet","getFruits","FruitAPI","then","res","fruits","getSweets","catch","err","newQuantity","fruitID","fruitsState","SweetAPI","sweets","sweetID","componentDidMount","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb5d3952.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n\tgetSweets: () => {\r\n\t\treturn axios.get('/api/sweets');\r\n\t},\r\n\tcreateSweet: data => {\r\n        return axios.post('/api/sweets/', data)\r\n\t},\r\n\taddSweet: data => {\r\n        return axios.put('/api/sweets/add', data)\r\n    },\r\n    minusSweet: data => {\r\n        return axios.put('/api/sweets/minus', data)\r\n    },\r\n    deleteSweet: data => {\r\n        return axios.post('/api/sweets/delete', data)\r\n    }\r\n\t\r\n};\r\n\r\n\r\n","import axios from 'axios';\r\n\r\nexport default {\r\n\tgetFruit: () => {\r\n\t\treturn axios.get('/api/fruit');\r\n    },\r\n    createFruit: data => {\r\n        return axios.post('/api/fruit/', data)\r\n    },\r\n    addFruit: data => {\r\n        return axios.put('/api/fruit/add', data)\r\n    },\r\n    minusFruit: data => {\r\n        return axios.put('/api/fruit/minus', data)\r\n    },\r\n    deleteFruit: data => {\r\n        return axios.post('/api/fruit/delete', data)\r\n    }\r\n\t\r\n};\r\n","import React from 'react';\r\nimport { Card, CardImg, CardBody, CardTitle, CardSubtitle, Button } from 'reactstrap';\r\n\r\nconst itemImages = (props) => {\r\n\treturn props.items.allItemsForSale.map((item) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"col-lg-4 cardSpace\" key={item._id}>\r\n\t\t\t\t<Card>\r\n\t\t\t\t\t<CardImg className=\"imgPic\" alt={item.item} src={item.image} />\r\n\t\t\t\t\t<CardBody className=\"cardColor\">\r\n\t\t\t\t\t\t<CardTitle>{item.item} </CardTitle>\r\n\t\t\t\t\t\t<CardSubtitle className=\"bottomTextSpace\">Type: {item.type}</CardSubtitle>\r\n\t\t\t\t\t\t<CardSubtitle className=\"bottomTextSpace\">Available: {item.quantity}</CardSubtitle>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"btn-space\"\r\n\t\t\t\t\t\t\tcolor=\"primary\"\r\n\t\t\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\t\t\tonClick={(event) => props.handleClick(item._id, item.quantity, item.type, event)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t+\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"btn-space\"\r\n\t\t\t\t\t\t\tcolor=\"warning\"\r\n\t\t\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\t\t\tonClick={(event) => props.handleMinusClick(item._id, item.quantity, item.type, event)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t-\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t<Button\r\n\t\t\t\t\t\t\tclassName=\"btn-space\"\r\n\t\t\t\t\t\t\tcolor=\"danger\"\r\n\t\t\t\t\t\t\tsize=\"lg\"\r\n\t\t\t\t\t\t\tonClick={(event) => props.handleDeleteClick(item._id, item.type, event)}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\tD\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</CardBody>\r\n\t\t\t\t</Card>\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n};\r\n\r\nexport default itemImages;\r\n","import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, } from 'reactstrap';\r\n\r\nconst CreateItem = (props) => {\r\n\r\n    return (\r\n      <Form>\r\n        <FormGroup>    \r\n          <Label for=\"exampleEmail\">Item Name</Label>\r\n          <Input type=\"text\" name=\"itemName\" placeholder=\"Enter Item Name\" \r\n          onChange={props.handleChange} \r\n          value={props.value.itemName}/>      \r\n        </FormGroup>\r\n\r\n        <FormGroup>    \r\n          <Label for=\"exampleEmail\">Item Quantity</Label>\r\n          <Input type=\"number\" name=\"itemQuantity\" placeholder=\"Enter Item Quantity\" \r\n          onChange={props.handleChange}\r\n          value={props.value.itemQuantity}/>\r\n        </FormGroup>\r\n\r\n        <FormGroup>\r\n          <Label for=\"exampleSelect\">Select Item Type</Label>\r\n          <Input type=\"select\" name=\"itemType\" onChange={props.handleChange} value={props.value.itemType}>\r\n           <option></option>\r\n            <option>Fruit</option>\r\n            <option>Sweet</option>\r\n          </Input>\r\n        </FormGroup>\r\n\r\n        <FormGroup>    \r\n          <Label for=\"exampleEmail\">Item Image Link</Label>\r\n          <Input type=\"text\" name=\"itemImage\" placeholder=\"Enter a image link\" \r\n          onChange={props.handleChange}\r\n          value={props.value.itemImage}/>\r\n        </FormGroup>\r\n\r\n        <Button color=\"primary\" size=\"lg\" onClick={event =>props.submitClick(event)}>Submit</Button>\r\n      </Form>\r\n    );\r\n}\r\n\r\nexport default CreateItem;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport SweetAPI from './utils/SweetAPI';\r\nimport FruitAPI from './utils/FruitAPI';\r\nimport ItemImages from './components/itemImages';\r\nimport CreateItem from './components/createItem';\r\n\r\nclass App extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\titemName: '',\r\n\t\t\titemQuantity: '',\r\n\t\t\titemType: '',\r\n\t\t\titemImage: '',\r\n\t\t\tfruits: [],\r\n\t\t\tsweets: [],\r\n\t\t\tallItemsForSale: []\r\n\t\t};\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.getFruits();\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h1 className=\"text-center titleSpace\">Supersweets</h1>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"col-md-9 borderLine center-block\">\r\n\t\t\t\t\t<ItemImages\r\n\t\t\t\t\t\titems={this.state}\r\n\t\t\t\t\t\thandleClick={this.updateAddQuantity}\r\n\t\t\t\t\t\thandleMinusClick={this.updateMinusQuantity}\r\n\t\t\t\t\t\thandleDeleteClick={this.deleteFromStore}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"offset-md-1 col-md-2 borderLine\">\r\n\t\t\t\t\t<CreateItem handleChange={this.onHandleChange} value={this.state} submitClick={this.addToStore} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n\r\n\t//============================== Universal Functions  Start ==========================================================\r\n\r\n\t//getting input boxes to add item\r\n\tonHandleChange = (event) => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\t//updates item quantity\r\n\tupdateAddQuantity = (id, quantity, type, event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconsole.log(type);\r\n\r\n\t\tif (type === 'Fruit') {\r\n\t\t\tthis.addFruitQuantity(id, quantity);\r\n\t\t} else if (type === 'Sweet') {\r\n\t\t\tthis.addSweetsQuantity(id, quantity);\r\n\t\t}\r\n\t};\r\n\r\n\t//minus item quantity\r\n\tupdateMinusQuantity = (id, quantity, type, event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (type === 'Fruit') {\r\n\t\t\tthis.minusFruitQuantity(id, quantity);\r\n\t\t} else if (type === 'Sweet') {\r\n\t\t\tthis.minusSweetsQuantity(id, quantity);\r\n\t\t}\r\n\t};\r\n\r\n\t//button click to add Sweet or Fruit to DB\r\n\taddToStore = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst { itemName, itemImage, itemQuantity, itemType } = this.state;\r\n\t\tif (itemType === '' || itemName === '' || itemImage === '' || itemQuantity === '') {\r\n\t\t\talert('Please fill out all the boxes');\r\n\t\t}\r\n\t\tif (itemType === 'Fruit') {\r\n\t\t\tthis.createFruit();\r\n\t\t} else if (itemType === 'Sweet') {\r\n\t\t\tthis.createSweet();\r\n\t\t}\r\n\t};\r\n\r\n\tdeleteFromStore = (id, itemType, event) => {\r\n\t\tevent.preventDefault();\r\n\t\tif (itemType === 'Fruit') {\r\n\t\t\tthis.deleteFruit(id);\r\n\t\t} else if (itemType === 'Sweet') {\r\n\t\t\tthis.deleteSweet(id);\r\n\t\t}\r\n\t};\r\n\r\n\t//============================== Fruit Functions  Start ==========================================================\r\n\r\n\t//getting all fruits from Database\r\n\tgetFruits = () => {\r\n\t\tFruitAPI.getFruit()\r\n\t\t\t.then((res) => {\r\n\t\t\t\tthis.setState({ fruits: res.data });\r\n\t\t\t\tthis.getSweets();\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//create Fruit Function\r\n\tcreateFruit = () => {\r\n\t\tconst { itemName, itemImage, itemQuantity, itemType } = this.state;\r\n\t\tconst object = {\r\n\t\t\titem: itemName,\r\n\t\t\tquantity: itemQuantity,\r\n\t\t\ttype: itemType,\r\n\t\t\timage: itemImage\r\n\t\t};\r\n\t\tFruitAPI.createFruit(object)\r\n\t\t\t.then((res) => {\r\n\t\t\t\talert(`${res.data.item} have been added`);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\titemName: '',\r\n\t\t\t\t\titemImage: '',\r\n\t\t\t\t\titemQuantity: '',\r\n\t\t\t\t\titemType: ''\r\n\t\t\t\t});\r\n\t\t\t\tthis.getFruits();\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//adds fruit quantity\r\n\taddFruitQuantity = (id, quantity) => {\r\n\t\tlet newQuantity = (quantity += 1);\r\n\t\tconst data = {\r\n\t\t\tfruitID: id,\r\n\t\t\tquantity: newQuantity\r\n\t\t};\r\n\t\tFruitAPI.addFruit(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//minus fruit quantity\r\n\tminusFruitQuantity = (id, quantity) => {\r\n\t\tlet newQuantity = (quantity -= 1);\r\n\t\tconst data = {\r\n\t\t\tfruitID: id,\r\n\t\t\tquantity: newQuantity\r\n\t\t};\r\n\t\tFruitAPI.minusFruit(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//deletes fruits\r\n\tdeleteFruit = (id) => {\r\n\t\tconst data = {\r\n\t\t\tfruitID: id\r\n\t\t};\r\n\t\tFruitAPI.deleteFruit(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//============================== Sweet Functions  Start ==========================================================\r\n\r\n\t//getting all sweets from Database\r\n\tgetSweets = () => {\r\n\t\tconst fruitsState = this.state.fruits;\r\n\t\tSweetAPI.getSweets()\r\n\t\t\t.then((res) => {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tsweets: res.data,\r\n\t\t\t\t\tallItemsForSale: [ ...fruitsState, ...res.data ]\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//Create Sweet Function\r\n\tcreateSweet = () => {\r\n\t\tconst { itemName, itemImage, itemQuantity, itemType } = this.state;\r\n\t\tconst object = {\r\n\t\t\titem: itemName,\r\n\t\t\tquantity: itemQuantity,\r\n\t\t\ttype: itemType,\r\n\t\t\timage: itemImage\r\n\t\t};\r\n\t\tSweetAPI.createSweet(object)\r\n\t\t\t.then((res) => {\r\n\t\t\t\talert(`${res.data.item} have been added`);\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\titemName: '',\r\n\t\t\t\t\titemImage: '',\r\n\t\t\t\t\titemQuantity: '',\r\n\t\t\t\t\titemType: ''\r\n\t\t\t\t});\r\n\t\t\t\tthis.getFruits();\r\n\t\t\t})\r\n\t\t\t.catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//adds sweets quantity\r\n\taddSweetsQuantity = (id, quantity) => {\r\n\t\tlet newQuantity = (quantity += 1);\r\n\t\tconst data = {\r\n\t\t\tsweetID: id,\r\n\t\t\tquantity: newQuantity\r\n\t\t};\r\n\t\tSweetAPI.addSweet(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//minus sweets quantity\r\n\tminusSweetsQuantity = (id, quantity) => {\r\n\t\tlet newQuantity = (quantity -= 1);\r\n\t\tconst data = {\r\n\t\t\tsweetID: id,\r\n\t\t\tquantity: newQuantity\r\n\t\t};\r\n\t\tSweetAPI.minusSweet(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n\r\n\t//deletes sweets\r\n\tdeleteSweet = (id) => {\r\n\t\tconst data = {\r\n\t\t\tsweetID: id\r\n\t\t};\r\n\t\tSweetAPI.deleteSweet(data).then(this.getFruits()).catch((err) => console.log(err));\r\n\t};\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}